// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/artnikel/apodservice/internal/model"

	time "time"
)

// ApodService is an autogenerated mock type for the ApodService type
type ApodService struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *ApodService) GetAll(ctx context.Context) ([]*model.APOD, error) {
	ret := _m.Called(ctx)

	var r0 []*model.APOD
	if rf, ok := ret.Get(0).(func(context.Context) []*model.APOD); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.APOD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDate provides a mock function with given fields: ctx, date
func (_m *ApodService) GetByDate(ctx context.Context, date time.Time) (*model.APOD, error) {
	ret := _m.Called(ctx, date)

	var r0 *model.APOD
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *model.APOD); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APOD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApodService interface {
	mock.TestingT
	Cleanup(func())
}

// NewApodService creates a new instance of ApodService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApodService(t mockConstructorTestingTNewApodService) *ApodService {
	mock := &ApodService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
